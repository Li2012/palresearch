	仙剑DOS版脚本系统解析
　　本解析基于夜烟兄、外塞之雾兄、ylmson兄、OopsWare兄的成果，特此致谢。完整的脚本释义见附件。
    仙剑脚本系统分两部分，即自动脚本与主脚本，两者在程序中具有不同的入口以及其他一些不同。因为前者整体的比率较小，以下和释义中不加特别指出的都是指主脚本而言。
    这些不同主要是什么呢？第一，自动脚本在数量上较小，剔除了一些自动脚本中不会用到的脚本的实现；其次，自动脚本与主脚本在调用机制上不同，前者每游戏循环调用一次，每次一般只执行一条脚本（也有特例，见释义）；后者则需要主动调用之，每次执行到该段脚本结束；这种区别主要来自于其不同的任务。
    下面用仙剑的主流程解释一下：前面略过，新建或调入存档后：
1、若有存档、音效、场景、事件、音乐或人物形象需要更动，更动之。
2、处理按键。
3、处理行走触发事件。这里可能会触发脚本、自动脚本，也可能会导致1中提到的各种数据更新，这种情况下前两者直接调用函数处理，后者设置标志留待后续处理。
4、图像处理和杂务。
5、若按键对应，处理主菜单。
6、若按键对应，处理调查事件。这里可能触发脚本。
7、检查更动标记，若有则跳回1，否则跳回2。
    相当平凡的一个主循环，但有一个明显处，就是主要数据的更新都被提出来分别处理了。这使得仙剑的脚本系统比之我们之前想象的更为简单，因为许多本来由脚本造成的重入问题这样都变成了在脚本里简单设置一下参数即可。
    下面的由实现分析对移植的影响部分，因为考虑不成熟被去掉了，也许以后会加上。如果释义或其他方面有说得不清楚或未想到的问题，请跟帖指出。
    下面分析一下其具体实现对移植的影响。从程序上看，仙剑显然不是面向对象的，而面向结构也不彻底，至少在脚本和战斗两块是如此，而这两者几乎就是游戏的整个逻辑部分。两者之间通过大量的表格和全局变量交互，脚本部分的实现更是出现了自体耦合。这当然是有理由的，游戏的整体表格化给存取档提供了极大的方便，但是这毫无疑问会给高级语言的移植带来严重的问题。